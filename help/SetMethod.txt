Методы множеств:
	1) Метод .copy() копирует элементы оригинального множества в новое множество. При этом вы можете сохранить новое множество в отдельную переменную и, вызвав функцию id,  вы увидите, что перед вами совершенно новый объект
	
	2) Метод .clear() очищает все множество от его элементов, тем самым происходит полная очистка. В итоге после вызова метода .clear() ваша переменная будет ссылаться на пустое множество
	
	3) Метод .remove() позволяет удалить элемент из множества. Если указать элемент, который отсутствует в множестве, возникнет ошибка KeyError. Попробуйте в редакторе кода ниже удалить несуществующий элемент и сами увидите, что произойдет

	4) Метод .discard() позволяет удалить элемент из множества, но в отличие от метода .remove() не возникнет ошибки при попытке удалить несуществующий элемент

	5) Метод .pop()  вернет произвольный элемент из множества, а затем удалит его. При попытке вызвать метод у пустого множества возникнет ошибка KeyError: 'pop from an empty set'

	6) Метод .add() позволяет добавить новый элемент в множество. Метод оказывает изменение на состояние самого множества без присвоения. Если вы пытаетесь добавить элемент, который уже существует в множестве, ничего не произойдет и ошибок никаких не будет.

	7) Метод .update() позволяет добавить сразу несколько элементов. Метод .update() может принимать произвольное количество любых объектов, поддерживающий итерацию по своим элементам. Это могут быть списки, кортежи, другое множество и т.д. Дублирующие элементы последовательностей игнорируются, само множество после вызова меняется

	8) Метод .union() позволяет выполнить операцию объединения. Метод .union() может принимать произвольное количество любых объектов, поддерживающих итерацию по своим элементам. Это могут быть списки, кортежи, другое множество и т.д. Дублирующие элементы последовательностей игнорируются. Результатом вызова метода .union() будет новое множество, или, другими словами, новый объект множества. Метод не изменяет значения того множества, у которого метод вызывался

	9) Метод .intersection() позволяет выполнить операцию пересечения. Метод .intersection() может принимать произвольное количество любых объектов, поддерживающих итерацию по своим элементам. Результатом вызова метода .intersection() будет новое множество куда войдут только те элементы, которые встречаются во всех коллекциях. Старые объекты никак не изменятся в процессе работы этого метода

	10) Метод .difference() позволяет выполнить операцию «разность множеств». Метод .difference() может принимать произвольное количество любых объектов, поддерживающих итерацию по своим элементам. Результатом вызова метода .difference() будет новое множество куда войдут только элементы из операции разности множеств. Старые объекты никак не изменятся в процессе работы этого метода

	11) Метод .symmetric_difference() позволяет выполнить операцию «симметрическая разность». Метод .symmetric_difference() может принимать только один объект, поддерживающих итерацию по своим элементам. Результатом вызова метода .symmetric_difference() будет новое множество куда войдут только элементы из операции разности множеств. Старые объекты никак не изменятся в процессе работы этого метода

	12) 