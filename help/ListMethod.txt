Методы списков:
	
	1) Метод .append обязательно принимает одно значение x и добавляет его в качестве нового элемента  в конец списка L. Следовательно размер списка увеличивается на одно значение. Никакого присвоения в переменную, как в случае со строками, здесь не требуется.

	2) Метод .clear не принимает никаких аргументов и делает список L пустым, удаляет все его элементы. 

	3) Метод .copy не принимает аргументов, делает копию списка - создается совершенно новый объект в памяти, он тоже является списком и будет состоять из таких же элементов как и оригинальный список, но у нового списка будет другой идентификатор.

	4) Метод .count имеет следующий формат:

		L.count(x)

		Принимает обязательно один аргумент. При помощи метода .count можно посчитать сколько раз встретилось в списке переданное значение.

	5) Метод .extend принимает обязательно один аргумент - итерабельную последовательность. Здесь нам придется забежать немного вперед, потому что данную тему мы еще не разбирали. Итерабельная последовательность состоит из нескольких элементов, поэтому списки и строки являются такой последовательностью. При помощи метода .extend можно добавить сразу все элементы из итерируемой последовательности в конец списка L. Значит метод .extend позволяет добавлять много элементов за один раз, вот его отличие от метода .append

	6) Метод .index имеет следующий формат:

		L.index(x, [start [, end]])

		Метод .index находит переданный элемент x в списке L и возвращает его индекс. Если в списке находится несколько элементов,  равных значению x, то будет возвращен индекс первого из них. Если список не содержит переданный элемент x, будет вызвано исключение ValueError.  У метода есть необязательные параметры start и end :

    		Если задан индекс start то первое вхождение значения x будет искаться начиная с индекса start.
    		Если заданы индексы start и end, то первое вхождение значения x будет искаться начиная с индекса start и перед индексом end.  Индекс start включается, а индекс end не включается

    7) Метод .insert выполняет вставку нового значения в список на определенную позицию. Метод .insert должен принимать два значения: index  - индекс куда вставляем новое значение и value - что нужно ставить, то есть само значение. 

    8) Метод .pop возвращает значение элемента с индексом index, а также удаляет его из списка L. По сути метод выполняет изъятие из списка элемента, стоящего на позиции index

    9) Слово remove переводится как «удалить», но этот метод, в отличие от метода .pop, удаляет по значению. Вы должны обязательно передать одно значение.

    10) Метод .reverse  не требует никаких аргументов и выполняет разворот списка - располагает элементы в противоположном порядке. При повторном вызове список вернётся в изначальное положение.

    11)L.sort(key=None, reverse=False)

		Если не передать никаких аргументов, то по умолчанию сортировка будет выполнена по возрастанию. После этого можете вызвать метод .reverse. Список отсортируется по убыванию. Если вы сразу хотите его отсортировать по убыванию, то вы можете вызвать метод .sort и в нём внутри скобок дополнительно прописать reverse=True.  